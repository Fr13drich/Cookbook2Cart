version: 2.1
orbs:
  python: circleci/python@2.0.3
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/python:3.13.5
    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      # - restore_cache:
      #     key: &deps1-cache deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      # - run: # install and activate virtual environment with pip
      #     command: |
      #       python3 -m venv venv
      #       . venv/bin/activate
      #       pip install -r requirements.txt
      # - save_cache: # ** special step to save dependency cache **
      #     key: *deps1-cache
      #     paths:
      #       - "venv"
  lint:
    docker:
      - image: cimg/python:3.13.5
    steps:
      - checkout
      # - restore_cache:
      #     key: &deps1-cache deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - python/install-packages:
          pkg-manager: pip
      # - run: 
      #     command: |
      #       ls
      #       . venv/bin/activate
      - run:
          name: "install pylint"
          command: "pip install pylint"
      - run:
          name: "Lint all (disable too many ancestor/arguments)"
          command: "find . -maxdepth 2 -name '*.py' | xargs pylint --disable='R0901, R0903, R0913'"
  test_bc:
    docker:
      - image: cimg/python:3.13.5
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run: 
          name: "download fr_core_news_md"
          command: "python3 -m spacy download fr_core_news_md"
      - run:
          name: "install pytest"
          command: "pip install pytest"
      - run:
          name: "run test 'Bien cuisiner'"
          command: |
              python3 -m spacy download fr_core_news_md
              mkdir ./test/test_results
              pytest ./test/scripts/reader_bc_test.py
  test_cg:
    docker:
      - image: cimg/python:3.13.5
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run: 
          name: "download fr_core_news_md"
          command: "python3 -m spacy download fr_core_news_md"
      - run:
          name: "install pytest"
          command: "pip install pytest"
      - run:
          name: "run test 'CafÃ© gourmand'"
          command: |
              mkdir ./test/test_results
              echo > ./log/reader.log
              pytest ./test/scripts/reader_cg_test.py
  test_eb:
    docker:
      - image: cimg/python:3.13.5
    steps:
      - checkout
      - run: git fetch
      - python/install-packages:
          pkg-manager: pip
      - run: 
          name: "download fr_core_news_md"
          command: "python3 -m spacy download fr_core_news_md"
      - run:
          name: "install pytest"
          command: "pip install pytest"
      - run:
          name: "install tesseract"
          command: |
              sudo apt update
              sudo apt install tesseract-ocr
              sudo apt install libtesseract-dev
              sudo cp ./data/fra.traineddata /usr/share/tesseract-ocr/4.00/tessdata/
      - run:
          name: 'debug'
          command: |
              echo 'raw json'
              cat ./data/json/EBp80.json
              echo 'recipe_files'
              ls -la ./data/recipe_files/EBp80.json
              cat ./data/recipe_files/EBp80.json
              mkdir ./test/test_results
              rm ./data/json/*
              echo > ./log/reader.log
              python3 ./read_the_book.py --input_dir=./test/EB_pics/ --output_dir=./test/test_results/
              echo 'raw json after'
              cat ./data/json/EBp80.json
              echo 'recipe_files after utf16'
              cat ./data/recipe_files/EBp80.json
              echo 'recipe_files after utf8'
              cat ./data/recipe_files/EBp80-utf8.json
              echo 'test output utf16'
              cat ./test/test_results/EBp80.json
              echo 'test output utf8'
              cat ./test/test_results/EBp80-utf8.json
              echo '--- log ---'
              cat ./log/reader.log
      # - run:
      #     name: "run test 'En bocal'"
      #     command: |
      #         rm ./data/json/*
      #         rm ./test/test_results/*
      #         pytest ./test/scripts/reader_eb_test.py
      

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - build
      - lint:
          requires: 
            - build
      # - test_bc:
      #     requires:
      #       - lint
      # - test_cg:
      #     requires:
      #       - lint
      - test_eb:
          requires:
            - lint
      